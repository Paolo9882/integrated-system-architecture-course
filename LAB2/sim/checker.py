# Multiplier checker

import sys

file_opened = 0

# Try to open the results file
try:
	
	# Open the reference results file (1st argument)
	fREF = open(sys.argv[1], "r")

	# Open the file generated by the current simulation (2nd argument)
	fVHD = open(sys.argv[2], "r")

	# Create a new file: the log file
	log = open("log_check.txt", "w")

	# If everything worked, we have opened the 3 files
	file_opened = 1

except:
	print("Unable to open files")

if (file_opened == 1):
	tot_error = 0 # total error counter
	
	log.write("#FPmul - Error log file\n\n")
	log.write("Expected\t\tSimulated\t\tError\n")
		
	# read the first line of the simulation output file	
	lineVHD = fVHD.readline()

	# if it is all zeros, then read another line until you find a line 
	# that does not contain only zeros. This is used to test versions 
	# with different latencies. Since once the multiplier starts, it computes
	# one multiplication/clock cycle then the only difference between versions
	# with different latencies is the number of "00000000" lines at the beginning
	while (lineVHD == "00000000\n"):
		lineVHD = fVHD.readline()
		

	# read a line from the reference file
	lineREF = fREF.readline()

	for lineREF in fREF:
		# compute the error for every line of the reference file
		error = int(lineVHD,16) - int(lineREF,16)
		log.write(lineREF.strip("\n")+"\t\t"+lineVHD.strip("\n")+"\t\t"+str(error)+"\n")
		lineVHD = fVHD.readline()

	# if error is different than zero, start counting the numnber of errors
	if (error != 0):
		tot_error +=1

	# print the total number of errors
	print("\nTotal error : " + str(tot_error))
	log.write("\nTotal error : " + str(tot_error))

	# close the files
	fREF.close()
	fVHD.close()
	log.close()

print("Check completed!\n")
		
		
		

